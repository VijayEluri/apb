#LyX 1.6.4.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\begin_preamble
%Some color definitions
\definecolor{DarkGreen}{rgb}{0,0.5,.2}
\definecolor{DarkBlue}{rgb}{0,0,0.5}
\definecolor{Wheat}{rgb}{0.8,0.7,0.5}
\definecolor{LightGray}{gray}{0.95}
\definecolor{LightBlue}{rgb}{0.6,0.6,0.8}
\definecolor{MediumGray}{gray}{0.4}

% "define" Shell Interaction
\lstdefinelanguage{shell} {morecomment=[l][keywordstyle]{$}}
\lstdefinelanguage[apb]{shell}{morecomment=[l][keywordstyle]{$},morecomment=[s][\color{DarkGreen}]{\[}{\]}}

% Default settings for listing

\lstset{frame=box, language=Java, aboveskip=3mm, belowskip=3mm, showstringspaces=false, columns=flexible, basicstyle={\small\ttfamily},backgroundcolor={\color{LightGray}} }

% Define foot notes reference format
\newrefformat{fn}{$^{\ref{#1}}$} 
\end_preamble
\options pdftex
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
APB User Guide
\end_layout

\begin_layout Author
Emilio LÃ³pez-Gabeiras
\end_layout

\begin_layout Date
Aug 6, 2009
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Section
Welcome to APB! 
\end_layout

\begin_layout Paragraph
APB is a simple, yet powerfull, project build system that inherits some
 ideas from Ant and Maven while trying to avoid the use of complex XML files
 to define the metadata of the project.
 Project Definition is done in Java so you have the full power of Java plus
 the benefit of using your favorite IDE to edit the configuration files.
 Here are some of the features APB provides out-of-the-box:
\end_layout

\begin_layout Itemize
Simple project definition based on default layouts, but with flexibility
 to accomodate your preferred one.
\end_layout

\begin_layout Itemize
Model based builds: APB is able to build projects based on metadata about
 the project.
\end_layout

\begin_layout Itemize
Full extensibility using Java.
\end_layout

\begin_layout Itemize
Dependency management.
\end_layout

\begin_layout Itemize
Full project lifecycle, including compilation, packaging and testing.
\end_layout

\begin_layout Itemize
Coverage support during testing.
\end_layout

\begin_layout Itemize
Documentation generation.
\end_layout

\begin_layout Itemize
Generation of project files for common IDEs (Currently Intellij Idea).
\end_layout

\begin_layout Itemize
Ant tasks to integrate APB projects into foreign contexts.
 
\end_layout

\begin_layout Itemize
Command line invocation including shell-completion
\end_layout

\begin_layout Chapter
Getting Started
\end_layout

\begin_layout Section
Prerequisites
\end_layout

\begin_layout Standard
APB requires a Java 6+ JDK installed.
\begin_inset Foot
status open

\begin_layout Plain Layout
APB can compiled code in 
\emph on
any 
\emph default
java version.
\end_layout

\end_inset

 By default it is going to use the one in your PATH (you can check it using
 
\series bold
java -version
\series default
).
 You can also set the APB_JAVA_HOME environment variable to point to the
 install directory of the desired JDK.
\end_layout

\begin_layout Section
Installing APB
\end_layout

\begin_layout Standard
The APB distribution comes packaged as a zip and contains:
\end_layout

\begin_layout Itemize
The APB binaries.
\end_layout

\begin_layout Itemize
The user guide (HTML and PDF).
\end_layout

\begin_layout Itemize
The API documentation.
\end_layout

\begin_layout Itemize
Samples, including those referenced in the user guide, along with some complete
 and more complex projects that you can use as the starting point for your
 own ones.
\end_layout

\begin_layout Itemize
The sources as a reference of the binary jars.
 (If you want to build APB yourself you can download the source distribution
 from: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://github.com/emiliolg/apb
\end_layout

\end_inset

)
\end_layout

\begin_layout Section
Test your installation
\end_layout

\begin_layout Standard
Make sure that your 
\family typewriter
\noun on
PATH
\family default
\noun default
 environment variable includes the APB 
\family typewriter
bin
\family default
 directory.
 
\begin_inset CommandInset label
LatexCommand label
name "sec:first-run"

\end_inset

Now if you run 
\family typewriter
\series bold
apb --version
\family default
\series default
 you should get an output like:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},frame=single,language=shell,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

$ apb --version
\end_layout

\begin_layout Plain Layout

apb       : 0.9.11
\end_layout

\begin_layout Plain Layout

java      : 1.6.0_13
\end_layout

\begin_layout Plain Layout

OS        : Mac OS X 10.5.8 on x86_64
\end_layout

\begin_layout Plain Layout

Memory    : 252M
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Configuring your environment
\end_layout

\begin_layout Standard
APB configuration properties are located in the 
\family typewriter
$HOME/.apb/apb.properties
\family default
 file.
 If you have done a fresh installation of APB, and have run the command
 as explained in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:first-run"

\end_inset

you should have an apb.properties file with a content similar to the following
 one
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fn:Assuming-installed-dir"

\end_inset

Assuming APB was installed in the 
\family typewriter
/usr/local/apb
\family default
 directory
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\bf\small},commentstyle={\it\color{MediumGray}},frame=single,language=sh,moredelim={[l][\ttfamily]{\=}}"
inline false
status open

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

# Some default properties
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# The path where APB definitions files are searched
\end_layout

\begin_layout Plain Layout

project.path=./APB:/usr/local/apb/samples/APB:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# A path used to load APB plugins
\end_layout

\begin_layout Plain Layout

ext.path=/usr/local/apb/ext
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Whether to use colorized output or not
\end_layout

\begin_layout Plain Layout

color=true
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Uncoment and replace values to configure your http proxy if necessary
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#proxy.user=user
\end_layout

\begin_layout Plain Layout

#proxy.password=password
\end_layout

\begin_layout Plain Layout

#proxy.protocol=protocol
\end_layout

\end_inset

In particular the project.path property tells APB where to search for modules
 and project definitions files.
\end_layout

\begin_layout Standard
It is good idea to configure bash completion, to do that just include the
 following line in your .bashrc file
\begin_inset CommandInset ref
LatexCommand prettyref
reference "fn:Assuming-installed-dir"

\end_inset

: 
\end_layout

\begin_layout Quote
.
 /usr/local/apb/bin/completion/apb-complete.sh
\end_layout

\begin_layout Chapter
First Steps
\end_layout

\begin_layout Section
Hello World
\end_layout

\begin_layout Standard
To build an APB module you run the 
\series bold
apb
\series default
 command with the name of the module followed by 
\begin_inset Quotes eld
\end_inset

.
\begin_inset Quotes erd
\end_inset

 (dot character) followed by the method (BuildTarget) that you want to invoke.
 APB will search for a 
\family typewriter

\begin_inset Quotes eld
\end_inset

.java
\family default

\begin_inset Quotes erd
\end_inset

 file with the module name in the current directory and in each of the directori
es specified in the project.path property, it will compile and load the file,
 and execute the specified method.
 If not method is specified it will execute the default target if defined.
\begin_inset Foot
status open

\begin_layout Plain Layout
 So module files are similar to build.xml files in ant or pom.xml files in
 maven, while methods (also called build targets) are similar to targets
 in ant or goals in maven.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's try this with one of the samples distributed with APB.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},frame=single,language={[apb]shell},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

$ cd samples/hello
\end_layout

\begin_layout Plain Layout

$ apb HelloWorld
\end_layout

\begin_layout Plain Layout

[HelloWorld.hello]              Hello World ! 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

BUILD COMPLETED in 597 milliseconds.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ apb HelloWorld.hello
\end_layout

\begin_layout Plain Layout

[HelloWorld.hello]              Hello World ! 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

BUILD COMPLETED in 597 milliseconds.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ apb HelloWorld.bye
\end_layout

\begin_layout Plain Layout

[HelloWorld.hello]              Hello World ! 
\end_layout

\begin_layout Plain Layout

[HelloWorld.bye]                Good Bye World ! 
\end_layout

\begin_layout Plain Layout

                    
\end_layout

\begin_layout Plain Layout

BUILD COMPLETED in 540 milliseconds.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's take a look at the HelloWorld.java file to figure out what is happening.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "frame=single,keywordstyle={\bf\color{DarkBlue}},keywordstyle={[2]\it\color{Wheat}},language=Java,morekeywords={[2] {@BuildTarget,@DefaultTarget}},stringstyle={\ttfamily\color{MediumGray}}"
inline false
status open

\begin_layout Plain Layout

import apb.metadata.*;
\end_layout

\begin_layout Plain Layout

import static apb.tasks.CoreTasks.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@DefaultTarget(
\begin_inset Quotes eld
\end_inset

hello
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

public class HelloWorld
\end_layout

\begin_layout Plain Layout

    extends ProjectElement
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    @BuildTarget(description = "Greetings from APB")
\end_layout

\begin_layout Plain Layout

    public void hello() {
\end_layout

\begin_layout Plain Layout

        printf("Hello World !
\backslash
n");
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

    @BuildTarget(depends="hello", description="Good Bye from APB")
\end_layout

\begin_layout Plain Layout

    public void bye() {
\end_layout

\begin_layout Plain Layout

        printf("Good Bye World !
\backslash
n");
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset

The java file defines a class (HelloWorld) that inherits from 
\family typewriter
apb.metadata.
 ProjectElement
\family default
, APB recognize any class that inherits (directly or indirectly) from 
\family typewriter
ProjectElement
\family default
 as a container for methods to be executed.
 Also this class contains two methods annotated as BuildTargets this methods
 are equivalent to Ant targets, so when you request APB to execute one of
 this methods the code inside them will be executed.
\end_layout

\begin_layout Standard
Additionally in the case of the
\series bold
 bye
\series default
 method the annotation indicates that this method 
\series bold
depends
\series default
 from the 
\series bold
hello
\series default
 method, this is why when you invoke the 
\series bold
bye
\series default
 target you will get the 
\series bold
hello
\series default
 target implicitly executed.
\end_layout

\begin_layout Standard
As an additional feature try the following:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},frame=single,language={[apb]shell},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ apb HelloWorld.help
\end_layout

\begin_layout Plain Layout

Commands for 'HelloWorld' :
\end_layout

\begin_layout Plain Layout

   bye              : Good Bye from APB
\end_layout

\begin_layout Plain Layout

   hello            : Greetings from APB
\end_layout

\begin_layout Plain Layout

   help             : List the available commands with a brief description
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As you see APB will generate a basic help information based on the description
 you have specified in the 
\family typewriter
BuildTarget
\family default
 annotations.
\end_layout

\begin_layout Section
Using Inheritance
\begin_inset CommandInset label
LatexCommand label
name "sec:Using-Inheritance"

\end_inset


\end_layout

\begin_layout Standard
So far you have seen how to generate the equivalent of ANT 
\family typewriter
build.xml
\family default
 files in APB.
 But because APB uses Java as the definition language all the power of Java
 is available.
 Let's use inheritance to extend the HelloWorld example.
 Take a look at the 
\family typewriter
Chat.java
\family default
 file.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "frame=single,keywordstyle={\bf\color{DarkBlue}},keywordstyle={[2]\it\color{Wheat}},language=Java,morekeywords={[2] {@BuildTarget}},stringstyle={\ttfamily\color{MediumGray}}"
inline false
status open

\begin_layout Plain Layout

import apb.metadata.*;
\end_layout

\begin_layout Plain Layout

import static apb.tasks.CoreTasks.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Chat
\end_layout

\begin_layout Plain Layout

    extends HelloWorld
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    @BuildTarget(depends=
\begin_inset Quotes erd
\end_inset

hello
\begin_inset Quotes erd
\end_inset

, before=
\begin_inset Quotes erd
\end_inset

bye
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

    public void chat() {
\end_layout

\begin_layout Plain Layout

        printf("Nice to see you again.
 It has been a long time.
\backslash
n");
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset

Here we've defined a new target that 
\series bold
depends
\series default
 on the 
\begin_inset Quotes eld
\end_inset

hello
\begin_inset Quotes erd
\end_inset

 target of the 
\family typewriter
HelloWorld
\family default
 class and we also indicates that this target must be executed 
\series bold
before
\series default
 the 
\begin_inset Quotes eld
\end_inset

bye
\begin_inset Quotes erd
\end_inset

 target of the super class.
 This has the efect of 
\begin_inset Quotes eld
\end_inset

injecting
\begin_inset Quotes erd
\end_inset

 the execution of the 
\begin_inset Quotes eld
\end_inset

chat
\begin_inset Quotes erd
\end_inset

 target before the excution of the 
\begin_inset Quotes eld
\end_inset

bye
\begin_inset Quotes erd
\end_inset

 one.
 Let's exercise it:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},frame=single,language={[apb]shell},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ apb Chat.chat
\end_layout

\begin_layout Plain Layout

[Chat.hello]              Hello World ! 
\end_layout

\begin_layout Plain Layout

[Chat.chat]               Nice to see you again.
 It has been a long time.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ apb Chat.bye
\end_layout

\begin_layout Plain Layout

[Chat.hello]              Hello World ! 
\end_layout

\begin_layout Plain Layout

[Chat.chat]               Nice to see you again.
 It has been a long time.
\end_layout

\begin_layout Plain Layout

[Chat.bye]                Good Bye World !
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Invoking Tasks
\end_layout

\begin_layout Standard
So far you have seen how to generate the equivalent of ANT 
\family typewriter
build.xml
\family default
 files in APB.
 But because APB uses Java as the definition language all the power of Java
 is available.
 Let's use inheritance to extend the HelloWorld example.
 Take a look at the 
\family typewriter
Chat.java
\family default
 file.
\end_layout

\begin_layout Section
Summary
\end_layout

\begin_layout Chapter
Using Predefined Modules
\end_layout

\begin_layout Standard
Actually the whole power of APB shows when you used Predefined Modules.
 Predefined Modules are just ProjectElement that include a set of predefined
 build targets and properties that automate a build lifecycle.
 Let's try them with a Java application.
\end_layout

\begin_layout Section
First Java Application
\end_layout

\begin_layout Standard
Let's take a look at the 
\family typewriter
Math.java 
\family default
file:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "frame=single,keywordstyle={\bf\color{DarkBlue}},keywordstyle={[2]\it\color{Wheat}},language=Java,morekeywords={[2] {@BuildTarget}},stringstyle={\ttfamily\color{MediumGray}}"
inline false
status open

\begin_layout Plain Layout

import apb.metadata.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Math
\end_layout

\begin_layout Plain Layout

    extends Module
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

        description = "A simple Math library";
\end_layout

\begin_layout Plain Layout

        group = "samples";
\end_layout

\begin_layout Plain Layout

        version = "1.0";
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That's it.
 This defines a Java Module, the id of the module will be 
\family typewriter
\series bold
math
\family default
\series default
, it will belong to the group 
\family typewriter
\series bold
samples
\family default
\series default
 and it have version 
\family typewriter
\series bold
1.0
\family default
\series default
.
\end_layout

\begin_layout Standard
We're taking advantage of the APB default conventions here.
 (If you take a look at the content of the 
\begin_inset Quotes eld
\end_inset

math
\begin_inset Quotes erd
\end_inset

 directory you will found a 
\begin_inset Quotes eld
\end_inset

src
\begin_inset Quotes erd
\end_inset

 subdirectory containing source code for the module).
\end_layout

\begin_layout Standard
Let's see what happens if we try APB over it, let's first use help to list
 the available commands:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},frame=single,language={[apb]shell},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ apb Math.help
\end_layout

\begin_layout Plain Layout

Commands for 'Math' : 
\end_layout

\begin_layout Plain Layout

    clean               : Deletes all output directories (compiled code
 and packages).
\end_layout

\begin_layout Plain Layout

    compile             : Compile classes and place them in the output directory.
\end_layout

\begin_layout Plain Layout

    compile-tests       : Compile test classes.
\end_layout

\begin_layout Plain Layout

    help                : List the available commands with a brief description.
\end_layout

\begin_layout Plain Layout

    javadoc             : Generates the Java Documentation (Javadoc) for
 the module.
\end_layout

\begin_layout Plain Layout

    package             : Creates a jar file with the module classes and
 resources.
\end_layout

\begin_layout Plain Layout

    resources           : Copy (eventually filtering) resources to the output
 directory.
\end_layout

\begin_layout Plain Layout

    run-tests           : Test the module (generating reports and  coverage
 info).
\end_layout

\begin_layout Plain Layout

    idegen:
\end_layout

\begin_layout Plain Layout

      idegen:eclipse    : Generate eclipse project and module files.
\end_layout

\begin_layout Plain Layout

      idegen:idea       : Generate idea project and module files.
\end_layout

\begin_layout Plain Layout

    module:
\end_layout

\begin_layout Plain Layout

      module:clone      : Generate a new Module based on a specified one.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
So where all this definitions come from ? As you have probably guessed they
 come from the 
\family typewriter
apb.metadata.Module
\family default
 class
\begin_inset Foot
status open

\begin_layout Plain Layout
Actually the 
\family typewriter
idegen
\family default
 and 
\family typewriter
module
\family default
 commands are extension commands.
 We will introduce extension commands later
\end_layout

\end_inset

.
 We're just using inheritance as described in 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "sec:Using-Inheritance"

\end_inset

 to predefine a number of useful targets.
\end_layout

\begin_layout Standard
Now let's try the package command:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},frame=single,language={[apb]shell},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ apb Math.package
\end_layout

\begin_layout Plain Layout

[Math.compile]                  Compiling   1 file
\end_layout

\begin_layout Plain Layout

[Math.package]                  Building: ....samples/lib/samples-math-1.0.jar
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

BUILD COMPLETED in 1278 milliseconds.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
So as you can see APB have compiled all the sources under the 
\family typewriter
src
\family default
 subdirectory, placed the generated classes under the directory 
\family typewriter
../output/math/classes
\family default
 and then package them in a jar file under the directory .
\family typewriter
./lib
\family default
.
\end_layout

\begin_layout Standard
The location for classes and jars is defined in properties (actually java
 fields) in the Module class, if you want to redefine there values you can
 do it easily, for example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "frame=single,keywordstyle={\bf\color{DarkBlue}},keywordstyle={[2]\it\color{Wheat}},language=Java,morekeywords={[2] {@BuildTarget}},stringstyle={\ttfamily\color{MediumGray}}"
inline false
status open

\begin_layout Plain Layout

import apb.metadata.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Math
\end_layout

\begin_layout Plain Layout

    extends Module
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

        description = "A simple Math library";
\end_layout

\begin_layout Plain Layout

        group = "samples";
\end_layout

\begin_layout Plain Layout

        version = "1.0";
\end_layout

\begin_layout Plain Layout

        source = "$moduledir/src/main/java";
\end_layout

\begin_layout Plain Layout

        output = "$moduledir/output/classes";
\end_layout

\begin_layout Plain Layout

        pkg.dir = "$moduledir/package";
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Using dependencies
\end_layout

\begin_layout Standard
What if we want to use the generated jar for the previous example in another
 module?.
 One alternative is just to say that the new module has a dependency on
 the jar file.
 Take a look at the example under the play-with-math directory:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "frame=single,keywordstyle={\bf\color{DarkBlue}},keywordstyle={[2]\it\color{Wheat}},language=Java,morekeywords={[2] {@BuildTarget}},stringstyle={\ttfamily\color{MediumGray}}"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import apb.metadata.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class PlayWithMath
\end_layout

\begin_layout Plain Layout

    extends Module
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

        dependencies(localLibrary("lib/samples-math-1.0.jar"));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        group = "samples";
\end_layout

\begin_layout Plain Layout

        version = "1.0";
\end_layout

\begin_layout Plain Layout

        pkg.mainClass = "Play";
\end_layout

\begin_layout Plain Layout

        pkg.addClassPath = true;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can now exercise it:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},frame=single,language={[apb]shell},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ apb PlayWithMath.package
\end_layout

\begin_layout Plain Layout

[PlayWithMath.compile]          Compiling   1 file
\end_layout

\begin_layout Plain Layout

[PlayWithMath.package]          Building: ..../lib/samples-play-with-math-1.0.jar
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

BUILD COMPLETED in 753 milliseconds.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ apb java -jar ../lib/samples-play-with-math-1.0.jar
\end_layout

\begin_layout Plain Layout

f = 1/2
\end_layout

\begin_layout Plain Layout

f.multiply(f) = 1/4
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Multi-Module Projects
\end_layout

\begin_layout Standard
Actually the implementation on the previous example was not the recommended
 one.
 What happens for example if you modify a file in the 
\family typewriter
math
\family default
 module ? You'll need to take care of running APB again for both modules.
 Also the path to the jar in the second module is hardwired, so if you modify
 the first module to place the jar in another place or change it's name,
 you'll have to take care of modifying it in the second module...
\end_layout

\begin_layout Standard
APB offers a more natural way to do that instead of saying that the PlayWithMath
 module depends on the jar file you can say that it depends on the Math
 object.
 Take a look at the modified PlayWithMath version under the 
\family typewriter
better-math
\family default
 directory:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "frame=single,keywordstyle={\bf\color{DarkBlue}},keywordstyle={[2]\it\color{Wheat}},language=Java,morekeywords={[2] {@BuildTarget}},stringstyle={\ttfamily\color{MediumGray}}"
inline false
status open

\begin_layout Plain Layout

import apb.metadata.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class PlayWithMath
\end_layout

\begin_layout Plain Layout

    extends DefaultModule
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

        dependencies(new Math());
\end_layout

\begin_layout Plain Layout

        pkg.mainClass = "Play";
\end_layout

\begin_layout Plain Layout

        pkg.addClassPath = true;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
What have we changed ? 
\end_layout

\begin_layout Standard
On the one hand we have placed all definition classes under a single sub-directo
ry 
\family typewriter
DEFS
\family default
.
 So you can easily find all the definition classes for a given project.
 You can also add additional classes under this directory to be used from
 the other definitions.
 For example: instead of just extending the apb.metadata.Module class we are
 creating a DefaultModule class for this project, that will hold definitions
 common to all modules.
 This conventions are not forced by APB but they are recommend practices.
\end_layout

\begin_layout Standard
On the other hand we have changed the dependencies invocation to refer to
 the Math object instead of referring to the jar file.
 Now each time you do a modification in any of the modules, APB will analyze
 what it needs to run in order to create an uptodate version of the build.
\end_layout

\begin_layout Standard
Let's try it:
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},frame=single,language={[apb]shell},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

$ apb PlayWithMath.package
\end_layout

\begin_layout Plain Layout

[Math.compile]                  Compiling   1 file
\end_layout

\begin_layout Plain Layout

[Math.package]                  Building: ..../lib/samples-math-1.0.jar
\end_layout

\begin_layout Plain Layout

[PlayWithMath.compile]          Compiling   1 file
\end_layout

\begin_layout Plain Layout

[PlayWithMath.package]          Building: ..../lib/samples-play-with-math-1.0.jar
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

BUILD COMPLETED in 1021 milliseconds.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ apb PlayWithMath.package
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

BUILD COMPLETED in 200 milliseconds.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ touch play-with-math/src/Play.java
\end_layout

\begin_layout Plain Layout

$ apb PlayWithMath.package
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

[PlayWithMath.compile]          Compiling   1 file
\end_layout

\begin_layout Plain Layout

[PlayWithMath.package]          Building: ..../lib/samples-play-with-math-1.0.jar
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

BUILD COMPLETED in 603 milliseconds.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ touch math/src/Math.java
\end_layout

\begin_layout Plain Layout

$ apb PlayWithMath.package
\end_layout

\begin_layout Plain Layout

the 
\end_layout

\begin_layout Plain Layout

[Math.compile]                  Compiling   1 file
\end_layout

\begin_layout Plain Layout

[Math.package]                  Building: ..../lib/samples-math-1.0.jar
\end_layout

\begin_layout Plain Layout

[PlayWithMath.compile]          Compiling   1 file
\end_layout

\begin_layout Plain Layout

[PlayWithMath.package]          Building: ..../lib/samples-play-with-math-1.0.jar
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

BUILD COMPLETED in 1021 milliseconds.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
As you see APB will process al the required steps based on the timestamps
 of the different files.
 APB manages 2 graphs of dependencies the dependencies between targets (like
 ANT) and the dependencies between Modules.
\end_layout

\begin_layout Standard
If you want to force the build (avoiding timestamp checking) you can use
 the 
\family typewriter
\series bold
-f
\family default
\series default
 (
\family typewriter
\series bold
--force-build
\family default
\series default
) option when running APB, if you don't want APB to go and build the dependant
 Modules you can use the 
\family typewriter
\series bold
-n
\family default
\series default
 (
\family typewriter
\series bold
--non-recursive
\family default
\series default
) option.
\end_layout

\begin_layout Section
Running Tests
\end_layout

\begin_layout Standard
Let's take a first look at the test running capabilities of APB.
 The following is the modified version of the 
\family typewriter
Math
\family default
 Module that includes an associated TestModule: 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "frame=single,keywordstyle={\bf\color{DarkBlue}},keywordstyle={[2]\it\color{Wheat}},language=Java,morekeywords={[2] {@BuildTarget}},stringstyle={\ttfamily\color{MediumGray}}"
inline false
status open

\begin_layout Plain Layout

import apb.metadata.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Math
\end_layout

\begin_layout Plain Layout

    extends DefaultModule
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

		description = "A simple Math library";
\end_layout

\begin_layout Plain Layout

		tests(new TestMath());
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here we are just saying that the Math module must be tested using the 
\family typewriter
TestMath
\family default
 module, let's take a look at the 
\family typewriter
TestMath
\family default
 module:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "frame=single,keywordstyle={\bf\color{DarkBlue}},keywordstyle={[2]\it\color{Wheat}},language=Java,morekeywords={[2] {@BuildTarget}},stringstyle={\ttfamily\color{MediumGray}}"
inline false
status open

\begin_layout Plain Layout

import apb.metadata.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class TestMath
\end_layout

\begin_layout Plain Layout

    extends TestModule
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
It just extends from 
\family typewriter
apb.metadata.TestModule
\family default
 and because we're just using all the default values, we don't need to define
 anything else.
 Apb will look under the directory 
\family typewriter
test-math/src
\family default
 for test classes using the default test framework (JUnit).
 If the defaults will no suite your needs, you just need to give appropiate
 values to the TestModule instance variables.
\end_layout

\begin_layout Standard
Let's run the tests, you should get an output like the following one:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},frame=single,language={[apb]shell},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ apb Math.run-tests
\end_layout

\begin_layout Plain Layout

[Math.compile]                  Compiling   1 file
\end_layout

\begin_layout Plain Layout

[TestMath.compile]              Compiling   1 file
\end_layout

\begin_layout Plain Layout

[Math.package]                  Building: ..../lib/samples-math-1.0.jar
\end_layout

\begin_layout Plain Layout

[TestMath.run]                  Suite ( 1/ 1): math.test.FractionTest     
   3 tests run in ....
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

BUILD COMPLETED in 753 milliseconds.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can configure the way you want your report results to look alike, wheter
 you want the standard Error and Output to be displayed, enable remote debugging
 of your tests, etc.
 Look at 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "cha:Using-APB-to"

\end_inset

 for more info.
\end_layout

\begin_layout Section
Code Coverage
\end_layout

\begin_layout Standard
Just too have a taste of APB code coverage facilities (Based on EMMA).
 Modified the 
\family typewriter
TestMath
\family default
 Module as listed below:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "frame=single,keywordstyle={\bf\color{DarkBlue}},keywordstyle={[2]\it\color{Wheat}},language=Java,morekeywords={[2] {@BuildTarget}},stringstyle={\ttfamily\color{MediumGray}}"
inline false
status open

\begin_layout Plain Layout

import apb.metadata.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class TestMath
\end_layout

\begin_layout Plain Layout

    extends TestModule
\end_layout

\begin_layout Plain Layout

{{
\end_layout

\begin_layout Plain Layout

    coverage.enable = true;
\end_layout

\begin_layout Plain Layout

    coverage.ensure = 80; 
\end_layout

\begin_layout Plain Layout

}}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
And run the tests again, you should get an output like the following one:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true,frame=single,language={[apb]shell},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ apb Math.run-tests
\end_layout

\begin_layout Plain Layout

[TestMath.run]         Suite ( 1/ 1): math.test.FractionTest        3 tests
 run in ....
\end_layout

\begin_layout Plain Layout

[TestMath.run]         Coverage summary Information: CLASS=100%, METHOD=80%,
 BLOCK=81%, LINE=88%
\end_layout

\begin_layout Plain Layout

BUILD COMPLETED in 1128 milliseconds.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
APB projects
\end_layout

\begin_layout Standard
In APB a project is nothing but a set of component where this components
 can be any Object that inherits from 
\family typewriter
ProjectElement
\family default
, In particular Modules and other Projects.
\end_layout

\begin_layout Standard
Projects allow you to exercise commands over a set of Modules.
\end_layout

\begin_layout Standard
For example let's take a look at the 
\family typewriter
\series bold
MathProject
\family default
\series default
 definition file:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "frame=single,keywordstyle={\bf\color{DarkBlue}},keywordstyle={[2]\it\color{Wheat}},language=Java,morekeywords={[2] {@BuildTarget}},stringstyle={\ttfamily\color{MediumGray}}"
inline false
status open

\begin_layout Plain Layout

import apb.metadata.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class MathProject
\end_layout

\begin_layout Plain Layout

    extends Project
\end_layout

\begin_layout Plain Layout

{{
\end_layout

\begin_layout Plain Layout

    components(new Math(), new PlayWithMath());
\end_layout

\begin_layout Plain Layout

}}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
So here we define that the 
\family typewriter
\series bold
MathProject
\family default
\series default
 is composed by the 
\family typewriter
\series bold
Math
\family default
\series default
 and 
\family typewriter
\series bold
PlayWithMath
\family default
\series default
 modules.
 So if we request APB to execute a given command over the 
\family typewriter
\series bold
MathProject
\family default
\series default
, the command will be applied over both Modules.
\end_layout

\begin_layout Section
Generate Project Description files for your IDE
\end_layout

\begin_layout Standard
Let's try generating an Intellij Idea project for MathProject:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},breaklines=true,frame=single,language={[apb]shell},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ apb MathProject.idegen:idea
\end_layout

\begin_layout Plain Layout

[Math.idegen:idea]              Writing: /Users/emilio/apb/samples/better-math/ID
EA/math.iml
\end_layout

\begin_layout Plain Layout

[TestMath.idegen:idea]          Writing: /Users/emilio/apb/samples/better-math/ID
EA/test-math.iml
\end_layout

\begin_layout Plain Layout

[PlayWithMath.idegen:idea]      Writing: /Users/emilio/apb/samples/better-math/ID
EA/play-with-math.iml
\end_layout

\begin_layout Plain Layout

[MathProject.idegen:idea]       Writing: /Users/emilio/apb/samples/better-math/ID
EA/DEFS.iml
\end_layout

\begin_layout Plain Layout

[MathProject.idegen:idea]       Writing: /Users/emilio/apb/samples/better-math/ID
EA/math-project.ipr
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

BUILD COMPLETED in 695 milliseconds.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can now open the math-project.ipr file in Intelli, you should get a project
 tree similar to the one shown below:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /Users/emilio/Desktop/Screen shot 2009-10-22 at 17.06.13 .png
	scale 70

\end_inset


\end_layout

\begin_layout Standard
As you see there is one Intellij Module generated for each APB Module (including
 the TestModule) plus an extra Module (DEFS in this case) that includes
 the sources for the APB Module definitions.
\end_layout

\begin_layout Section
Summary
\end_layout

\begin_layout Standard
In this chapter we have introduce the use of APB predefined Modules and
 use them to define some simple projects taking advantage of APB defaults.In
 the following chapters we will dive into more detailed APB functionality
 .
\end_layout

\begin_layout Chapter
Using Build Properties
\end_layout

\begin_layout Standard
APB property management allows for configuting and tailoring the execution
 of your builds.
 It is a simple concept but it provides some degrees of flexibility so it
 worths to understand their behaviour.
\end_layout

\begin_layout Section
A first example
\end_layout

\begin_layout Standard
Let's go back to our 
\begin_inset Quotes eld
\end_inset

Hello World
\begin_inset Quotes erd
\end_inset

 example but now modified to use Properties.
 Let's take a look at the one in the 
\family typewriter
samples/hello-properties
\family default
 directory:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "frame=single,keywordstyle={\bf\color{DarkBlue}},keywordstyle={[2]\it\color{Wheat}},language=Java,morekeywords={[2] {@BuildTarget,@BuildProperty,@DefaultTarget}},numbers=left,numberstyle={\tiny},stringstyle={\ttfamily\color{MediumGray}}"
inline false
status open

\begin_layout Plain Layout

import apb.metadata.*;
\end_layout

\begin_layout Plain Layout

import static apb.tasks.CoreTasks.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class HelloWorld
\end_layout

\begin_layout Plain Layout

    extends ProjectElement
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    @BuildProperty String who = "John";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    @BuildTarget(description = "Greetings from APB")
\end_layout

\begin_layout Plain Layout

    public void hello()
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

        printf("Hello $who!
\backslash
n");
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    @BuildTarget(
\end_layout

\begin_layout Plain Layout

                 depends = "hello",
\end_layout

\begin_layout Plain Layout

                 description = "Good Bye from APB"
\end_layout

\begin_layout Plain Layout

                )
\end_layout

\begin_layout Plain Layout

    public void bye()
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

        printf("Good Bye ${who}!
\backslash
n");
\end_layout

\begin_layout Plain Layout

        if (who.equals("John"))
\end_layout

\begin_layout Plain Layout

            printf("Send greeting to Jane
\backslash
n");
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
This example shows some concepts about properties .As we see in line 7 a
 property is just an instance variable that has been annotated with the
 
\family typewriter
\series bold
@BuildProperty
\family default
\series default
 annotation.It can be used as a normal instance variableas in the 
\family typewriter
\series bold
if
\family default
\series default
 in line 22, or it can be included in an String constant as in lines 12
 and 21, in the later case it will be expanded to the actual value using
 the 
\family typewriter
\series bold
apb.Environment.expand
\family default
\series default
 method.
 Because variable expansion in String is not an embedded feature in Java,
 APB will do it on some key places as for example when invoking methods
 of APB built-in tasks.
\end_layout

\begin_layout Standard
Let's tun the example to ge a taste of it:
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset

Let's run it:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},frame=single,language={[apb]shell},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

$ apb HelloWorld.bye
\end_layout

\begin_layout Plain Layout

[HelloWorld.hello]              Hello John! 
\end_layout

\begin_layout Plain Layout

[HelloWorld.bye]                Good Bye John!
\end_layout

\begin_layout Plain Layout

[HelloWorld.bye]                Send greeting to Jane
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ apb -Dwho=Emilio HelloWorld.hello
\end_layout

\begin_layout Plain Layout

[HelloWorld.hello]              Hello Emilio! 
\end_layout

\begin_layout Plain Layout

[HelloWorld.bye]                Good Bye Emilio! 
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
As expected in the first run the value of the 
\family typewriter
\series bold
who
\family default
\series default
 property is 
\begin_inset Quotes eld
\end_inset

John
\begin_inset Quotes erd
\end_inset

 and APB will display the appropiate output.
 In the second case we are using anl APB feature that is the posibility
 to 
\emph on
override
\emph default
 the value of a property when invoking APB.
 For doing that we just use the 
\family typewriter
\series bold
-D
\family default
\series default
 command line option.
 This is a very useful feature because it allows the user to change the
 behaviour of a build in a very simple way.
 This is particulary useful for test properties, so in this way you can
 enable debugging when running a test, controlling which tests are you going
 to run, etc.
\end_layout

\begin_layout Section
A first example
\end_layout

\begin_layout Chapter
Using APB to run your tests
\begin_inset CommandInset label
LatexCommand label
name "cha:Using-APB-to"

\end_inset


\end_layout

\end_body
\end_document
